// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  verificationToken String?   @unique
  password          String
  image             String?
  role              Role      @default(USER)
  mfaEnabled        Boolean   @default(false)
  mfaSecret         String?
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  pages             Page[]
  events            Event[]
  tickets           Ticket[]
  comments          Comment[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
}

model Page {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  slug      String   @unique
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  startDate   DateTime
  endDate     DateTime
  location    String?
  published   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
}

enum Role {
  USER
  EDITOR
  SUPPORT
  ADMIN
}

model Menu {
  id        String     @id @default(cuid())
  name      String
  items     MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuItem {
  id        String     @id @default(cuid())
  label     String
  url       String
  order     Int
  parentId  String?
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId    String
  parent    MenuItem?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  MenuItem[] @relation("ParentChild")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Ticket {
  id          String    @id @default(cuid())
  title       String
  description String
  status      Status    @default(OPEN)
  priority    Priority  @default(MEDIUM)
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model SiteSettings {
  id               String   @id @default(cuid())
  siteName         String
  description      String
  homeTitle        String
  homeDescription  String
  aboutTitle       String
  aboutDescription String
  updatedAt        DateTime @updatedAt
}
